import { ParsedLocation } from './location.js';
import { DeferredPromiseState } from './defer.js';
import { ControlledPromise } from './utils.js';
import { AnyRoute, AnyRouteWithContext } from './route.js';
export interface Register {
}
export type RegisteredRouter = Register extends {
    router: infer TRouter extends AnyRouter;
} ? TRouter : AnyRouter;
export interface RouterOptions<in out TTrailingSlashOption extends TrailingSlashOption> {
    trailingSlash?: TTrailingSlashOption;
}
export interface Router<in out TRouteTree extends AnyRoute, in out TTrailingSlashOption extends TrailingSlashOption> {
    routeTree: TRouteTree;
    options: RouterOptions<TTrailingSlashOption>;
}
export type AnyRouterWithContext<TContext> = Router<AnyRouteWithContext<TContext>, any>;
export type AnyRouter = Router<any, any>;
export interface ViewTransitionOptions {
    types: Array<string>;
}
export declare function defaultSerializeError(err: unknown): {
    name: string;
    message: string;
} | {
    data: unknown;
};
export interface ExtractedBaseEntry {
    dataType: '__beforeLoadContext' | 'loaderData';
    type: string;
    path: Array<string>;
    id: number;
    matchIndex: number;
}
export interface ExtractedStream extends ExtractedBaseEntry {
    type: 'stream';
    streamState: StreamState;
}
export interface ExtractedPromise extends ExtractedBaseEntry {
    type: 'promise';
    promiseState: DeferredPromiseState<any>;
}
export type ExtractedEntry = ExtractedStream | ExtractedPromise;
export type StreamState = {
    promises: Array<ControlledPromise<string | null>>;
};
export type TrailingSlashOption = 'always' | 'never' | 'preserve';
export declare function getLocationChangeInfo(routerState: {
    resolvedLocation?: ParsedLocation;
    location: ParsedLocation;
}): {
    fromLocation: ParsedLocation<{}> | undefined;
    toLocation: ParsedLocation<{}>;
    pathChanged: boolean;
    hrefChanged: boolean;
    hashChanged: boolean;
};
